@page "/Aportes"
@inject AportesService aportesService
@rendermode InteractiveServer

<PageTitle>Aportes</PageTitle>
<div class="container">
    <div class="card shadow-lg">
        <div class="card-header">
            <h5 class="text-center">Consulta de aportes</h5>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="" selected disabled>Elija una opci&oacute;n</option>
                        <option value="AporteId">AporteId</option>
                        <option value="Fecha">Fecha</option>
                        <option value="Nombre">Nombre</option>
                    </InputSelect>
                </div>
                <div class="col-4">
                    <div class="input-group">
                        <button type="button" class="btn btn-outline-secondary bi bi-arrow-clockwise" @onclick="Restablecer"></button>
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                        <a href="/Aportes/Create" class="btn btn-success">
                            <span class="bi bi-plus-square"></span> Crear Aporte
                        </a>
                    </div>
                </div>
                <div class="row mt-3">

                    @*Desde*@
                    <div class="col-3">
                        <label class="col-form-label"><strong>Desde</strong></label>
                        <InputDate class="form-control" @bind-Value="Desde"></InputDate>
                    </div>

                    @*Hasta*@
                    <div class="col-3">
                        <label class="col-form-label"><strong>Hasta</strong></label>
                        <div class="input-group">
                            <InputDate class="form-control" @bind-Value="Hasta"></InputDate>
                        </div>

                    </div>
                </div>
            </div>
            @*Tabla de aportes*@
            <table class="table table-hover">
                <thead class="table table-striped text-black">
                <tr>
                    <th>AporteId</th>
                    <th>Persona</th>
                    <th>Monto</th>
                    <th>Editar</th>
                    <th>Eliminar</th>
                </tr>
                </thead>
                <tbody>
                @*foreach para cada campo de la tabla*@
                @foreach (var aportes in ListaAportes)
                {
                    <tr>
                        <td>@aportes.AporteId</td>
                        <td>@aportes.NombrePersona</td>
                        <td>@aportes.Monto.ToString("N2")</td>
                        <td class="text-center">
                            <a class="btn btn-outline-primary bi bi-pencil-square" href="/Aportes/Edit/@aportes.AporteId"></a>
                        </td>
                        <td>
                            <a class="btn btn-outline-danger bi bi-trash" href="/Aportes/Delete/@aportes.AporteId"></a>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
        @*Footer*@
        <div class="card-footer">
            <label>Cantidad de aportes: @ListaAportes.Count |||</label>
            <label>Total: @ListaAportes.Sum(a => a.Monto).ToString("N2")</label>
        </div>
    </div>
</div>

@code {
    @*Lista de aportes*@
    public List<Aportes> ListaAportes { get; set; } = new List<Aportes>();
    @*Filtros*@
    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;
    
    @*Valores para filtrar las fechas*@
    public DateTime? Desde { get; set; }

    public DateTime? Hasta { get; set; }

    @*Metodo que lista todos los aportes*@
    protected override async Task OnInitializedAsync()
    {
        ListaAportes = await aportesService.Listar(a => a.AporteId > 0);
        Desde = null;
        Hasta = null;
    }

    @*Metodo para buscar segun el filtro elegido*@
    private async Task Buscar()
    {
        if (Filtro == "AporteId")
        {
            if (int.TryParse(ValorFiltro, out int AporteId))
            {
                ListaAportes = await aportesService
                    .Listar(a => a.AporteId == AporteId);
            }
        }
        else if (Filtro == "Fecha")
        {
            ListaAportes = await aportesService
                .Listar(a => a.FechaRegistro >= Desde && a.FechaRegistro <= Hasta);
        }
        
        else if (ValorFiltro.Trim() != "" && Filtro == "Nombre")
        {
            ListaAportes = await aportesService
                .Listar(a => a.NombrePersona.ToLower()
                    .Contains(ValorFiltro.ToLower()));
        }
    }

    @*Restablece los campos, muestra todos los aportes.*@
    private async Task Restablecer()
    {
        ListaAportes = await aportesService.Listar(a => a.AporteId > 0);
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
        Desde = null;
        Hasta = null;
    }
}

